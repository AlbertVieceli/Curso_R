(df <- data.frame(nomes, idade, sexo, stringsAsFactors = F))
nomes <- c('Joao', 'Lara', 'Manoel', 'Pedro', 'Denise')
idade <- c(30, 43, 21, 34, 25)
sexo <- c('M', 'F', 'M', 'M', 'M')
(df <- data.frame(nomes, idade, sexo, stringsAsFactors = F))
nomes <- c('Joao', 'Lara', 'Manoel', 'Pedro', 'Denise')
idade <- c(30, 43, 21, 34, 25)
sexo <- c('M', 'F', 'M', 'M', 'F')
(df <- data.frame(nomes, idade, sexo, stringsAsFactors = F))
df[2:4, 2:3]
str(df)
data("mtcars")
?mtcars
str(mtcars)
str(mtcars)
summary(mtcars)
head(mtcars)
sum(mtcars$hp)
v <- sum(mtcars$hp)
mean(v)
mean(x = mtcars$hp)
setwd("~/Documentos/Programas em geral/Programas R/Curso_R")
#Leitura da base de dados
base = read.csv('credit_data.csv')
#apaga coluna clienteid
base$clientid = NULL
summary(base)
#Calcular a media da idade
base$age = ifelse(base$age<0, media, base$age)
#Identificando e substi os NA pela media
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
#Escalonamento de atributos (normalizacao ou padronizacao(preferencia essa))
#base = scale(base)
base[, 1:3] = scale(base[,1:3])
#Divisao base teste e base treinamento
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(rpart)
classificador = rpart(formula = default~., data = base_treinamento)
print(classificador)
install.packages('rpart.plot')
library(rpart.plot)
rpart.plot(classificador)
View(base)
previsoes = predict(classificador, newdata = base_teste[-4])
previsoes
#encode da classe
base$default = filter(base$default, levels(0,1))
#Leitura da base de dados
base = read.csv('credit_data.csv')
#apaga coluna clienteid
base$clientid = NULL
summary(base)
#Calcular a media da idade
base$age = ifelse(base$age<0, media, base$age)
#Identificando e substi os NA pela media
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
#Escalonamento de atributos (normalizacao ou padronizacao(preferencia essa))
#base = scale(base)
base[, 1:3] = scale(base[,1:3])
#encode da classe
base$default = filter(base$default, levels(0,1))
#encode da classe
base$default = factor(base$default, levels = c(0,1))
#Divisao base teste e base treinamento
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(rpart)
classificador = rpart(formula = default~., data = base_treinamento)
print(classificador)
install.packages('rpart.plot')
library(rpart.plot)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
View(previsoes)
previsoes = predict(classificador, newdata = base_teste[-4], type = 'class')
previsoes
matriz_confusao = table(base_teste[,4], previsoes)
print(matriz_confusao)
library(caret)
install.packages('caret')
library(caret)
confusionMatrix(matriz_confusao)
clearPushBack()
wipe
base=read.csv('census.csv')
base$X = NULL
#conv string para numerico
#Contagem de itens em determinada coluna
table(base$sex)
unique(base$sex)#valores presentes na coluna
#c = cria vetor
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0,1))
#verificando se tem valor NA
base[is.na(base$sex)]
#ATRIBUTOS CATEGORICOS PARA DISCRETOS
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#ESCALONAMENTO DE ATRIBUTOS
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
#base teste e treinamento
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(rpart)
classificador = rpart(formula = income ~., data = base_treinamento)
rpart.plot(classificador)
View(base)
previsoes= predict(classificador, newdata = base_teste[,-15], type = 'class')
previsoes
matriz_confusao = table(base_teste[,-15], previsoes)
print(matriz_confusao)
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
source("~/Documentos/Programas em geral/Programas R/Curso_R/arvore_decisao_census.r")
base=read.csv('census.csv')
base$X = NULL
#conv string para numerico
#Contagem de itens em determinada coluna
table(base$sex)
unique(base$sex)#valores presentes na coluna
#c = cria vetor
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0,1))
#verificando se tem valor NA
base[is.na(base$sex)]
#TRATAMENTO DE CAMPOS CATEGoRICOS
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#ESCALONAMENTO DE ATRIBUTOS
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
#base teste e treinamento
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(rpart)
classificador = rpart(formula = income ~., data = base_treinamento)
rpart.plot(classificador)
previsoes= predict(classificador, newdata = base_teste[,-15], type = 'class')
#poda
poda = classificador$cptable[which.min(classificador$cptable[,"xerror"]), "CP"]
print(classificador$cptable)
print(classificador)
poda = classificador$cptable[which.min(classificador$cptable[,"xerror"]), "CP"]
print(classificador$cptable)
prune(classificador,poda)
rpart.plot(classificador)
previsoes= predict(classificador, newdata = base_teste[,-15], type = 'class')
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
